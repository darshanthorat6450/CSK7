#include <iostream> 
#include <vector> 
#include <queue> 
using namespace std; 
vector<int> adj[10]; 
bool visited[10]; 
queue<int> q; 
int n; 
void createGraph() { 
int edges; 
cout << "Enter number of vertices: "; 
cin >> n; 
cout << "Enter number of edges: "; 
cin >> edges; 
cout << "Enter edges (from to):\n"; 
for (int i = 0; i < edges; i++) { 
int u, v; 
cin >> u >> v; 
adj[u].push_back(v); 
// adj[v].push_back(u); // Uncomment for undirected 
} 
} 
void bfsRecursive() { 
if (q.empty()) return; 
int current = q.front(); 
q.pop(); 
cout << current << " "; 
for (int neighbor : adj[current]) { 
if (!visited[neighbor]) { 
visited[neighbor] = true; 
q.push(neighbor); 
} 
} 
bfsRecursive(); // Recursive call 
} 
int main() { 
createGraph(); 
int start; 
cout << "Enter starting node for BFS: "; 
cin >> start; 
visited[start] = true; 
q.push(start); 
cout << "BFS Traversal: "; 
bfsRecursive(); 
return 0; 
}

Enter number of vertices: 4
Enter number of edges: 5
Enter edges (from to):
0 1
0 2
1 2
1 3
2 4
Enter starting node for BFS: 0
BFS Traversal: 0 1 2 3 4 
